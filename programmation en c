/MAXIMUM
#include <stdlib.h>
float maximum(float a,float b)
{
    if(a>b)
    {
        return a ;
    }
    else
    {
        return b ;
    }
}

int main()
{
    float x,y,z ;
    printf("saisir 2 reels  \n");
    scanf("%f%f",&x,&y,&z);
    z=maximum(x,y);

return 0;
}
----------------------------------------------------------------------------------
FONCTION PUISSANCE 
#include <stdio.h>
#include <stdlib.h>
float puissance(float,int);//declaration de la fonction
int main()
{   float x,res;
    int n;
    printf("donner les valeurs de x et n\n");
    scanf("%f",&x);
    scanf("%i",&n );
    res=puissance(x,n);//branchement sur la fonction +correspondance des parametres (reservation de nouvelles cases memoire a=x , b=n )
    printf("%f",res);
    return 0;
}
float puissance(float a,int b)//on peut ecrire include maths.h puis au lieu de cette fonct : return(pow(a,b));
{   float c=1;
    int i ;
    for(i=1;i<=b;i++)
        {c=c*a;}
    return c ;//les cases vont etre libérées apres
}
//une autre fonction factorielle
-----------------------------------------------------------------------------------------------------------
FACTORIELLE NORMALE 
#include <stdio.h>
#include <stdlib.h>
float puissance(float,int);//declaration de la fonction
int main()
{   float x,res;
    int n;
    printf("donner les valeurs de x et n\n");
    scanf("%f",&x);
    scanf("%i",&n );
    res=puissance(x,n);//branchement sur la fonction +correspondance des parametres (reservation de nouvelles cases memoire a=x , b=n )
    printf("%f",res);
    return 0;
}
float puissance(float a,int b)//on peut ecrire include maths.h puis au lieu de cette fonct : return(pow(a,b));
{   float c=1;
    int i ;
    for(i=1;i<=b;i++)
        {c=c*a;}
    return c ;//les cases vont etre libérées apres
}
//une autre fonction factorielle
-------------------------------------------------------------------------------------------------------------
FACORIELLE RECURSIVE 
#include <stdio.h>
#include <stdlib.h>
float puissance(float,int);//declaration de la fonction
int main()
{   float x,res;
    int n;
    printf("donner les valeurs de x et n\n");
    scanf("%f",&x);
    scanf("%i",&n );
    res=puissance(x,n);//branchement sur la fonction +correspondance des parametres (reservation de nouvelles cases memoire a=x , b=n )
    printf("%f",res);
    return 0;
}
float puissance(float a,int b)//on peut ecrire include maths.h puis au lieu de cette fonct : return(pow(a,b));
{   float c=1;
    int i ;
    for(i=1;i<=b;i++)
        {c=c*a;}
    return c ;//les cases vont etre libérées apres
}
//une autre fonction factorielle
-----------------------------------------------------------------------------------------------------------
INTRODUCTIO CP /DANIK AND HIS FRIEND 
#include <iostream>

using namespace std;

int main()
{   int n ;
    cin >> n;
    string s ;
    cin >>s;
    int x = 0, y = 0;
    for( int i=0;i<n;i++){
        if (s[i]=='A')
           x+=1;
        else if (s[i]=='D')
            y+=1;
    }


    if (x>y){
        cout <<"Anton"<<endl;
    }else if (x<y){
    cout<<"Danik"<<endl;
    }
    else {
        cout << "Friendship" << endl;
    }




    return 0;
}
--------------------------------------------------------------------
INTRO CP WALL WIDTH :
#include <iostream>

using namespace std;

int main()
{   int n ,x;
    cin >> n;
    int h ;
    cin >> h;
    int width = 0;
    for (int i = 0; i < n; i++){
        cin >>x ;
        if (x>h)
            width += 2;
        else
            width+=1;
    }
    cout<<width<<endl;
    return 0;
}

-------------------------------------------------------------
INTRO CP CHAT WITH HER !
#include <bits\stdc++.h>

using namespace std;

int main(){
    string s ; cin >> s ;
    set <char> ss;
    for (int i = 0 ;i<s.size();i++){
        ss.insert(s[i]);

    }
    if (ss.size()%2==1)
    cout<<"IGNORE HIM!"<<endl;
    else
        cout<<"CHAT WITH HER!"<<endl;

return 0;

}
----------------------------------------------------------------
INTRO CP : NB YEARS TO GAIN MORE WEIGHT !(C++)
#include <iostream>

using namespace std;

int main()
{
    int a,b;
    cin>> a;
    cin>> b;
    int nbyears =0;
    while(a<=b){
        a*=3;
        b*=2;
        nbyears++;
    }
    cout<<nbyears<<endl;


    return 0;
}
------------------------------------------------------
TD1EX1 PROGRAMMATION EN C 
#include <stdio.h>
#include <stdlib.h>

int main()
{   int A, B, C,D;
    printf("donner a valeur de A:\n");
    scanf("%d%d%d",&A,&B,&C);
    D=A;
    A=B;
    B=C;
    C=A;
    printf("Après  avoir fait la permutation:\nA = %d, B = %d, C = %d\n", A, B, C);
    return 0;
}

-------------------------------------------------------------------------
TD1 EX 2 PROGRAMMATION EN C :
#include <stdio.h>
#include <stdlib.h>

int main()
{    int x,y;
    int qe,r;
    float qr;
    printf("donner les valeurs de x et y :\n");
    scanf("%d%d",&x,&y);
    qe=x/y;
    r=x%y;
    qr=(float)x/y;
    printf("Le quotient entier de %d divisé par %d est: %d\n",x,y,qe);
    printf("Le reste de la division entière de %d par %d est: %d\n",x,y,r);
    printf("Le quotient rationnel de %d divisé par %d est: %.2f\n",x,y,qr);
    return 0;
}
--------------------------------------------------------------------
TD1EX5 EN C :
#include <stdio.h>
#include <stdlib.h>
//la methode a deux variables uniquement
int main()
{   int sum,x,i;//sum et x sont les variables qu'on calcule avec
    sum=0;
    for(i=1;i<=4;i++)
    {
        printf("saisir la %i éme valeur \n",i);
        scanf("%i",&x);
            sum=sum+x;
    }
printf("la somme est %i",sum);
return 0;
}


---------------------------------------------------------------------------------------
TD1EX5 PROG EN C :
#include <stdio.h>
#include <stdlib.h>
#include <math.h>


int main()
{   int a,b,c;
    float x1,x2,d;
    scanf("%i",&a);
    scanf("%i",&b);
    scanf("%i",&c);
    if ((a==0)&&(b!=0))
        printf("%f",-(float)c/b);
    else
    {
        if ((a==0)||(b==0))
            printf("%f",0);
            else
            {
                d=b*b-4*a*c;
                if (d<0)
                    printf("pas de solution ");
                    else
                    {
                        x1=(-b-sqrt(d))/(2*a);
                        x2=(-b+sqrt(d))/(2*a);
                        printf("%f,%f",x1,x2);
                    }
            }
    }
    return 0;
}
---------------------------------------------------------------------------------------
exercice seance du 19 /10/24 : 
1)ecrire une fct permuter aui etant donné 2 entiers permet de permuter leur valeur 
2)tester la fct ds la main sur 2 entiers saisir au clavier 
------------------->
#include <stdio.h>
void permuter(int*a,int*b){
    int c ;
    c=*a;// c va prendre le contenu de la case pointée 
    c=*a;
    *a=*b;
    *b=c;}
int main()
{
    int x,y ; 
    scanf("%i%i",&x,&y);
    permuter(&x,&y);
    printf ("x=%i y=%i",x,y);
    return 0;


}
________________________________________________________________________________________________
autre exercice de la meme  seance : 
*1) ecrire une fct remplissage qui etant donné un tableau permet de le remplir par saisie de valeur 
2) ecrire une fct d'affichage qui etant donné un tableau permet d'afficher ses valeurs 
3) dans le main : 
*creer un tableau dynamique d'une taile saisie 
*remplir ce tab 
*afficher ses valeurs 
*incrementer le tableau ---------->
#include <stdio.h>
#include <stdlib.h>

// Fonction pour remplir un tableau avec des valeurs entrées par l'utilisateur
void remplir(int* tab, int n) {
    for (int i = 0; i < n; i++) {
        printf("Entrer la valeur %d: ", i + 1);
        scanf("%i", &tab[i]); // ou bien scanf("%i", tab + i)
    }
}

// Fonction pour afficher les valeurs d'un tableau
void affichage(int* tab, int n) {
    printf("Les valeurs du tableau sont :\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t", tab[i]);
    }
    printf("\n");
}

// Fonction pour incrémenter chaque valeur d'un tableau
void add(int* tab, int n) {
    for (int i = 0; i < n; i++) {
        tab[i] = tab[i] + 1;
    }
}

int main() {
    int* t1;
    int taille;

    // Demande la taille du tableau à l'utilisateur
    printf("Donner la taille du tableau: ");
    scanf("%i", &taille);

    // Allocation dynamique de mémoire pour le tableau
    t1 = (int*)malloc(taille * sizeof(int));

    // Vérification si l'allocation a réussi
    if (t1 == NULL) {
        printf("Erreur d'allocation de mémoire!\n");
        return 1;
    }

    // Remplissage du tableau
    remplir(t1, taille);

    // Incrémentation des valeurs du tableau
    add(t1, taille);

    // Affichage du tableau
    affichage(t1, taille);

    // Libération de la mémoire allouée
    free(t1);

    return 0;
}

___________________
PASSAGE PAR ADRESSE / 
#include <stdio.h>

void incrementer(int *n) {
    *n = *n + 1; // Modifie la valeur à l'adresse pointée par n
}

int main() {
    int x = 5;
    incrementer(&x); // Passe l'adresse de x
    printf("x = %d\n", x); // Affiche : x = 6
    return 0;
}

_____________________________________
#include <stdio.h>
#include <stdlib.h>

// Fonction pour saisir les valeurs d'un tableau
void saisir_tab(int* tab, int n) {
    for (int i = 0; i < n; i++) {
        printf("Entrer la valeur %d: ", i + 1);
        scanf("%i", &tab[i]);
    }
}

// Fonction pour afficher les valeurs d'un tableau
void afficher_tab(int* tab, int n) {
    printf("Les valeurs du tableau sont :\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t", tab[i]);
    }
    printf("\n");
}

int main() {
    int n, *T, *TPOS, *TNEG;
    int nbpos = 0, nbneg = 0;

    // Saisie de la taille du tableau
    printf("Entrez la taille du tableau: ");
    scanf("%i", &n);

    // Allocation dynamique de mémoire pour le tableau principal
    T = (int*)malloc(sizeof(int) * n);
    if (T == NULL) {
        printf("Erreur d'allocation de mémoire pour T!\n");
        return 1;
    }

    // Allocation maximale pour TPOS et TNEG
    TPOS = (int*)malloc(sizeof(int) * n);
    TNEG = (int*)malloc(sizeof(int) * n);

    if (TPOS == NULL || TNEG == NULL) {
        printf("Erreur d'allocation de mémoire pour TPOS ou TNEG!\n");
        free(T); // Libération de mémoire en cas d'erreur
        return 1;
    }

    // Saisie des valeurs du tableau
    saisir_tab(T, n);

    // Séparation des valeurs positives et négatives
    for (int i = 0; i < n; i++) {
        if (T[i] < 0) {
            TNEG[nbneg++] = T[i];
        } else {
            TPOS[nbpos++] = T[i];
        }
    }

    // Affichage des tableaux séparés
    printf("Valeurs négatives :\n");
    afficher_tab(TNEG, nbneg);

    printf("Valeurs positives ou nulles :\n");
    afficher_tab(TPOS, nbpos);
"
    // Libération de la mémoire allouée
    free(T);
    free(TPOS);
    free(TNEG);

    return 0;
}
i<i+1t
--------------------------------------------------------------
using in c : ********
#include <stdio.h>
#include<string.h>
struct personne {
    char nom[30];
    char prenom[20];
    int age;

};
int main(){
    struct personne p1,p2;
    p1.age=31;
    strcpy(p1.nom,"ali");
    strcpy(p1.prenom,"salah");
    printf("le nom est :%s\n",p1.nom);
    printf("le prenom est :%s,",p1.nom);
    printf("l'age est :%i,",p1.age);

return 0;
}
OUTPUT: le nom est :ali
le prenom est :salah,l'age est :31,
_______________________________________________________________
autrement --------------------------------------- (syntaxe 3) //le syntaxe 2 je ne l'ai pas compilé //
#include <stdio.h>
#include<string.h>
 typedef struct {
    char nom[30];
    char prenom[20];
    int age;
} s_pers;

int main(){
    s_pers pers1,pers2;
    pers1.age=31;
    strcpy(pers1.nom,"ali");
    strcpy(pers1.prenom,"salah");
    printf("le nom est :%s\n",pers1.nom);
    printf("le prenom est :%s,",pers1.prenom);
    printf("l'age est :%i,",pers1.age);

return 0;
}
    
OUTPUT:le nom est :ali
le prenom est :salah,l'age est :31,
-----------------------------------------------------------
REMARQUE:
s_pers p1,*pp; (pp est un pointeur mais *pp montre le contenu de l'adresse de p1)
pp=&p1;
(*pp).age=20;
_________________________________ 
TABLEAUX DE STRUCTURES STRUCT 
______________________________
#include <stdio.h>//courbe[i] est de type point 
#include<string.h>
 typedef struct{
     int absc; 
     int ord ; 
 } point ;
 int main()
 { point courbe [50];//tableau de points de taille maximale 50 
 courbe[i].absc=5;//acces a l'abcisse de la case de l'indice i
 return 0;
 }
__________________________________
AUTREMENT:
#include <stdio.h>

 typedef struct{
     int absc; 
     int ord ; 
 } point ;
 int main()
    { point courbe[3]={{5,2},{6,8},{9,3}};
    for(int i=0;i<3;i++){
        printf("point%i=  (absc = %d, ord = %d)\n",i+1,courbe[i].absc,courbe[i].ord);
    }
 return 0;}
______________________________________
 
 
 
 

